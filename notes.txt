

notes for json and managing files:
    nlohmann/json was installed to make it easier to read and write to json files
    I use is to convert data to and from the json format

    When dealing with json files, include this:

        #include "include/nlohmann/json.hpp"
        #include <iostream>
        #include <fstream>
        using json = nlohmann::json; (this is not necessary but keeps the syntax the same across files, so use it)
    
    There are three objects that come with <fstream>, these being ifstream, ofstream, and fstream
     - ifstream is for reading files
     - ofstream is for creating and writing files
     - fstream is a mixture of the previous two
    these all have diffrerent uses.

    ifstream is used just for reading files, it makes a variable that you can use to get data from the files, but not edit the data
    usecase is like this:
        ifstream fileToRead("<filepath>");
    
    ofstream is used for creating and writing to files, it makes a variable that you can use to write to, but not read from.
    ofstream can open a file that does not currently exist, in this situation it will create a new file
    if ofstream opens a file that alreay exists, it will clear out any data currently in the file, be careful not to delete anything
    it is used like this:
        ofstream thisFile("<filepath>");
        thisFile << "text";
    
    you can perform several write action and they will stack, so this:
        thisFile << "text";
        thisFile << "text";
    will result in the file having "texttext" in it.    
    
    fstream is a mixture of the two, it can be used to read and write, but cannot not create a file
    fstream will not clear a file when opening it, but will clear the file when writing anything to it
    it is used like this:
        fstream thisFile("<filepath>");
        thisFile << "text";
    
    remember that writing anything to the file will delete any data that was previously in the file,
    this also means that separate write actions will not stack, they will overide each other,
        thisFile << "text";
        thisFile << "text";
    this sequence will result in a file that contains "text"

    now, once we have a file that we can read, we use nlohmann/json
    once we have the file, we use the parse command and put it into a json object, this is generally used like so:
        fstream thisFile("<filepath>");
        json data = json::parse(thisFile);
    with this, we can access data from the variable as if it were a dictionary
        string color = data["color"];
    we can also change values as if it were a dictionary
        data["color] = "blue";

    we can also just create a json object and manually add data as if it were a dictionary
        json newJson;
        newJson["color"] = "red";

    when writing to files, make sure that what you are writing to the file is a json object to make sure that the json file will be formated correctly
    




